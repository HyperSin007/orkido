name: CI/CD Pipeline

on:
  push:
    branches:
      - beta
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, bcmath, intl, pdo, pdo_mysql, fileinfo, zip
          coverage: none

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy .env for testing
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Install NPM dependencies and build assets
        run: |
          npm ci
          npm run build

      - name: Run tests
        run: php artisan test
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password

      - name: Run migrations
        run: php artisan migrate --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t orkido-app .

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            set -e  # Exit on any error
            set -x  # Print commands as they execute
            
            echo "üöÄ Starting deployment..."
            
            # Create project directory if it doesn't exist
            if [ ! -d "/www/wwwroot/orkido" ]; then
              echo "üìÅ Creating project directory..."
              sudo mkdir -p /www/wwwroot/orkido
              sudo chown $USER:$USER /www/wwwroot/orkido
            fi
            
            # Navigate to project directory
            echo "üìÇ Navigating to project directory..."
            cd /www/wwwroot/orkido
            
            # Clone or pull repository
            if [ ! -d ".git" ]; then
              echo "üì• Cloning repository..."
              git clone https://github.com/HyperSin007/orkido.git .
            else
              echo "üîÑ Pulling latest changes..."
              git pull origin main
            fi
            
            # Handle .env file setup (remove directory if exists, create file)
            echo "‚öôÔ∏è Setting up environment file..."
            if [ -d ".env" ]; then
              echo "üóëÔ∏è Removing existing .env directory..."
              rm -rf .env
            fi
            
            if [ ! -f ".env" ]; then
              echo "üìÑ Creating .env file from template..."
              cp .env.production .env
            else
              echo "‚úÖ Environment file already exists as file"
            fi
            
            # Set proper permissions for .env file
            echo "üîê Setting .env file permissions..."
            if [ ! -f ".env" ]; then
              echo "‚ùå ERROR: .env is not a regular file!"
              ls -la .env* || echo "No .env files found"
              exit 1
            fi
            chmod 600 .env
            chown $USER:$USER .env
            
            # Verify .env file content
            echo "üìã Verifying .env file content..."
            if [ ! -s ".env" ]; then
              echo "‚ùå ERROR: .env file is empty!"
              exit 1
            fi
            echo "‚úÖ .env file created successfully ($(wc -l < .env) lines)"
            
            # Export environment variables for docker-compose
            echo "üîë Loading environment variables..."
            set +x  # Temporarily disable command echo for security
            export $(grep -v '^#' .env | xargs)
            set -x  # Re-enable command echo
            
            # Verify critical variables are loaded (without showing values)
            echo "üîç Verifying environment variables..."
            if [ -z "$DB_USERNAME" ] || [ -z "$DB_PASSWORD" ]; then
              echo "‚ùå ERROR: Database credentials not loaded from .env file"
              echo "DB_USERNAME is set: $([ -n "$DB_USERNAME" ] && echo "YES" || echo "NO")"
              echo "DB_PASSWORD is set: $([ -n "$DB_PASSWORD" ] && echo "YES" || echo "NO")"
              exit 1
            fi
            echo "‚úÖ Environment variables loaded successfully"
            
            # Minimal downtime Docker deployment
            if docker-compose ps app | grep -q "Up"; then
              echo "ÔøΩ Performing rolling update (minimal downtime)..."
              docker-compose build app
              docker-compose up -d app
              sleep 15
            else
              echo "üöÄ Starting fresh deployment..."
              docker-compose up -d
              sleep 30
            fi
            
            echo "üîß Running Laravel setup..."
            docker-compose exec -T app php artisan key:generate --force
            docker-compose exec -T app php artisan migrate --force
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache
            
            echo "üîç Checking container status..."
            docker-compose ps
            
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Application should be available at: http://$(hostname -I | awk '{print $1}'):8080"
